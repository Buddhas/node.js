1：为什么要异步io:
    （1）用户体验
    （2）资源分配，让单线程远离阻塞，更好利用cpu(多线程的代价在于创建线程和执行期线程上下文切换的花销大，在计算机中io和cpu计算是可以并行进行的，但是同步编程会造成阻塞)

2：异步io的现状：
    （1）阻塞io和非阻塞io的区别在于非阻塞调用后会立即返回，非阻塞io获取数据时要通过文件描述符再次获取数据
    （2）主要的轮询技术有：read（cpu一直浪费在等待上），select（通过文件描述符上事件状态来判断，采用1024数组来存储状态）
        poll（和select相似，通过链表来存储状态），epolle（是Linux下஌ည最高的I/O事件通知机制，通过事件通知，执行回调的方式执行）
        kqueue(实现与epoll相似，不过它仅在FreeBSD系统下存在)
    （3）现实中的异步：Node在*nixࣰ下采用了libeio配合libev实现 I/O部分，实现了异步I/O，在Windowsࣰ下用了IOCP实现I/O
     强调：I/O包括磁盘文件、硬件、套接字等几乎所有的计算机资源
         node的单线程仅仅只是指JavaScript执行在单线程中，内部完成I/O任务另有线程池。


3:node中的异步io：
    （1）通过事件循环实现异步（每执行一次循环体的过程我们称之为tick）
    （2）JavaScript从发起调用到内核执行完成io操作的过程中，存在中间产物，叫请求对象，JavaScript调用node的核心模块，node调用c++内建模块，内建模块通过libuv进行系统调用，是node典型的
    调用方式，封装好对象后送入线程池等待执行，线程池中io操作调用完毕后会通知iocp，并将线程归还线程池，io完成后进入事件循环
    （3）事件循环、观察者、请求对象、I/O线程池这四者共同构成了node异步io模型的基本要素
    （4）除了JavaScript是单线程的之外，node自身其实是多线程的，知识io使用的cpu较少

4：非io的异步api
    （1）node中与io无关的异步api，分别是setTimeout(),setInterval(),setImmediate()和process.nextTick()
    （2）调用setTimeout()或者setInterval()创建的定时器会插入到定时器观察者内部的一个红黑树中，每次tick事件执行都会在红黑树中迭代出对象检查是否超过定时时间
    （3）process.nextTick()会将回调函数放入队列中，在下一次Tick时取出
    （4）setImmediate()和process.nextTick()类似，都是将回调延迟执行，区别在于process.nextTick()会先执行

5：事件驱动与高性能服务器：
    （1）node通过事件驱动来处理请求，无须为每个请求创建额外的对应线程，可以省掉创建线程和销毁线程的时间